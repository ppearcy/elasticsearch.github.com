---
layout: guide
title: Core Types
cat: guide
sidebar: reference_mapping
---

p. Each JSON field can be mapped to a specific core type. JSON itself already provides us with some typing, with its support for @string@, @integer@/@long@, @float@/@double@, @boolean@, and @null@.

p. The following sample tweet JSON document will be used to explain the core types:

<pre class="prettyprint lang-js">
{
    "tweet" {
        "user" : "kimchy"
        "message" : "This is a tweet!",
        "postDate" : "2009-11-15T14:12:12",
        "priority" : 4,
        "rank" : 12.3
    }
}
</pre>

p. Explicit mapping for the above JSON tweet can be:

<pre class="prettyprint lang-js">
{
    "tweet" : {
        "properties" : {
            "user" : {"type" : "string", "index" : "not_analyzed"},
            "message" : {"type" : "string", "null_value" : "na"},
            "postDate" : {"type" : "date"},
            "priority" : {"type" : "integer"},
            "rank" : {"type" : "float"}
        }
    }
}
</pre>


h1. String

p. The text based string type is the most basic type, and contains one or more characters. An example mapping can be:

<pre class="prettyprint lang-js">
{
    "tweet" : {
        "properties" : {
            "message" : {
                "type" : "string",
                "store" : "yes",
                "index" : "analyzed",
                "null_value" : "na"
            }
        }
    }
}
</pre>

p. The above mapping defines a @string@ @message@ property/field within the @tweet@ type. The field is stored in the index (so it can later be retrieved using selective loading when searching), and it gets analyzed (broken down into searchable terms). If the message has a @null@ value, then then value that will be stored is @na@.

p. The following table lists all the attributes that can be used with the @string@ type:

|_. Attribute |_. Description |
|@index_name@|The name of the field that will be stored in the index. Defaults to the property/field name.|
|@store@|Set to @yes@ to store actual field in the index, @no@ to not store it. Defaults to @no@ (note, the JSON document itself is stored, and it can be retrieved from it).|
|@index@|Set to @analyzed@ for the field to be indexed and searchable after being broken down into token using an analyzer. @not_analyzed@ means that its still searchable, but does not go through any analysis process or broken down into tokens. @no@ means that it won't be searchable at all (as an individual field; it may still be included in @_all@). Setting to @no@ disables @include_in_all@. Defaults to @analyzed@.|
|@term_vector@|Possible values are @no@, @yes@, @with_offsets@, @with_positions@, @with_positions_offsets@. Defaults to @no@.|
|@boost@|The boost value. Defaults to @1.0@.|
|@null_value@|When there is a (JSON) null value for the field, use the @null_value@ as the field value. Defaults to not adding the field at all.|
|@omit_norms@|Boolean value if norms should be omitted or not. Defaults to @false@.|
|@omit_term_freq_and_positions@|Boolean value if term freq and positions should be omitted. Defaults to @false@. Deprecated since 0.20, see @index_options@.|
|@index_options@|Allows to set the indexing options, possible values are @docs@ (only doc numbers are indexed), @freqs@ (doc numbers and term frequencies), and @positions@ (doc numbers, term frequencies and positions). Defaults to @freqs@. Since 0.20.|
|@analyzer@|The analyzer used to analyze the text contents when @analyzed@ during indexing and when searching using a query string. Defaults to the globally configured analyzer.|
|@index_analyzer@|The analyzer used to analyze the text contents when @analyzed@ during indexing.|
|@search_analyzer@|The analyzer used to analyze the field when part of a query string.|
|@include_in_all@|Should the field be included in the @_all@ field (if enabled). If @index@ is set to @no@ this defaults to @false@, otherwise, defaults to @true@ or to the parent @object@ type setting.|
|@ignore_above@|Set to a size where above the mentioned size the string will be ignored. Handly for generic @not_analyzed@ fields that should ignore long text. (since @0.19.9).|
|@position_offset_gap@|Position increment gap between field instances with the same field name. Defaults to 0.|

p. The @string@ type also support custom indexing parameters associated with the indexed value. For example:

<pre class="prettyprint lang-js">
{
    "message" : {
        "_value":  "boosted value",
        "_boost":  2.0
    }
}
</pre>

p. The mapping is required to disambiguate the meaning of the document. Otherwise, the structure would interpret "message" as a value of type "object". The key @_value@ (or @value@) in the inner document specifies the real string content that should eventually be indexed. The @_boost@ (or @boost@) key specifies the per field document boost (here 2.0).

h1. Number

p. A number based type supporting @float@, @double@, @byte@, @short@, @integer@, and @long@. It uses specific constructs within Lucene in order to support numeric values. An example mapping can be:

<pre class="prettyprint lang-js">
{
    "tweet" : {
        "properties" : {
            "rank" : {
                "type" : "float",
                "null_value" : 1.0
            }
        }
    }
}
</pre>

p. The following table lists all the attributes that can be used with a numbered type:

|_. Attribute |_. Description |
|@type@|The type of the number. Can be @float@, @double@, @integer@, @long@, @short@, @byte@. Required.|
|@index_name@|The name of the field that will be stored in the index. Defaults to the property/field name.|
|@store@|Set to @yes@ to store actual field in the index, @no@ to not store it. Defaults to @no@ (note, the JSON document itself is stored, and it can be retrieved from it).|
|@index@|Set to @no@ if the value should not be indexed. Setting to @no@ disables @include_in_all@. If set to @no@ the field can be stored in @_source@, have @include_in_all@ enabled, or @store@ should be set to @yes@ for this to be useful.|
|@precision_step@|The precision step (number of terms generated for each number value). Defaults to @4@.|
|@boost@|The boost value. Defaults to @1.0@.|
|@null_value@|When there is a (JSON) null value for the field, use the @null_value@ as the field value. Defaults to not adding the field at all.|
|@include_in_all@|Should the field be included in the @_all@ field (if enabled). If @index@ is set to @no@ this defaults to @false@, otherwise, defaults to @true@ or to the parent @object@ type setting.|
|@ignore_malformed@|Ignored a malformed number. Defaults to @false@. (Since @0.19.9).|

h1. Date

p. The date type is a special type which maps to JSON string type. It follows a specific format that can be explicitly set. All dates are @UTC@. Internally, a date maps to a number type @long@, with the added parsing stage from string to long and from long to string. An example mapping:

<pre class="prettyprint lang-js">
{
    "tweet" : {
        "properties" : {
            "postDate" : {
                "type" : "date",
                "format" : "YYYY-MM-dd"
            }
        }
    }
}
</pre>

p. The date type will also accept a long number representing UTC milliseconds since the epoch, regardless of the format it can handle.

p. The following table lists all the attributes that can be used with a date type:

|_. Attribute |_. Description |
|@index_name@|The name of the field that will be stored in the index. Defaults to the property/field name.|
|@format@|The "date format":date-format.html. Defaults to @dateOptionalTime@.|
|@store@|Set to @yes@ to store actual field in the index, @no@ to not store it. Defaults to @no@ (note, the JSON document itself is stored, and it can be retrieved from it).|
|@index@|Set to @no@ if the value should not be indexed. Setting to @no@ disables @include_in_all@. If set to @no@ the field can be stored in @_source@, have @include_in_all@ enabled, or @store@ should be set to @yes@ for this to be useful.|
|@precision_step@|The precision step (number of terms generated for each number value). Defaults to @4@.|
|@boost@|The boost value. Defaults to @1.0@.|
|@null_value@|When there is a (JSON) null value for the field, use the @null_value@ as the field value. Defaults to not adding the field at all.|
|@include_in_all@|Should the field be included in the @_all@ field (if enabled). If @index@ is set to @no@ this defaults to @false@, otherwise, defaults to @true@ or to the parent @object@ type setting.|
|@ignore_malformed@|Ignored a malformed number. Defaults to @false@. (Since @0.19.9).|

h1. Boolean

p. The boolean type Maps to the JSON boolean type. It ends up storing within the index either @T@ or @F@, with automatic translation to @true@ and @false@ respectively.

<pre class="prettyprint lang-js">
{
    "tweet" : {
        "properties" : {
            "hes_my_special_tweet" : {
                "type" : "boolean",
            }
        }
    }
}
</pre>

p. The boolean type also supports passing the value as a number (in this case @0@ is @false@, all other values are @true@).

p. The following table lists all the attributes that can be used with the boolean type:

|_. Attribute |_. Description |
|@index_name@|The name of the field that will be stored in the index. Defaults to the property/field name.|
|@store@|Set to @yes@ to store actual field in the index, @no@ to not store it. Defaults to @no@ (note, the JSON document itself is stored, and it can be retrieved from it).|
|@index@|Set to @no@ if the value should not be indexed. Setting to @no@ disables @include_in_all@. If set to @no@ the field can be stored in @_source@, have @include_in_all@ enabled, or @store@ should be set to @yes@ for this to be useful.|
|@boost@|The boost value. Defaults to @1.0@.|
|@null_value@|When there is a (JSON) null value for the field, use the @null_value@ as the field value. Defaults to not adding the field at all.|
|@include_in_all@|Should the field be included in the @_all@ field (if enabled). If @index@ is set to @no@ this defaults to @false@, otherwise, defaults to @true@ or to the parent @object@ type setting.|

h1. Binary

p. The binary type is a base64 representation of binary data that can be stored in the index. The field is always stored and not indexed at all.

<pre class="prettyprint lang-js">
{
    "tweet" : {
        "properties" : {
            "image" : {
                "type" : "binary",
            }
        }
    }
}
</pre>

p. The following table lists all the attributes that can be used with the binary type:

|_. Attribute |_. Description |
|@index_name@|The name of the field that will be stored in the index. Defaults to the property/field name.|
